#!groovy

int rollbackNum = "${RollbackFrom}" as Integer

stage('Setup') {
  node('AWS') {
    echo "Rolling back from stage ${RollbackFrom}"
  }
  node('97') {
    if(rollbackNum >= 3) {
      // Set the city name for file path on .97
      def cityUpper="Tucson" //Default
      if("${City}".compareTo("austin")==0) {
        cityUpper="Austin"
      } else if("${City}".compareTo("elpaso_juarez")==0) {
        cityUpper="EP_Juarez"
      } else if("${City}".compareTo("houston")==0) {
        cityUpper="Houston"
      } else if("${City}".compareTo("newyork")==0) {
        cityUpper="NYC"
      } else if("${City}".compareTo("tucson")==0) {
        cityUpper="Tucson"
      }

      // Pull the most recent backup-minus-1 to get the files for the given city
      bat "C:\\Users\\NLarson\\jenkins\\copyBackup.bat ${cityUpper}"
      stash includes: "**/currentBackup/**", name: 'backup_files'
    }
  }
  node('AWS') {
    unstash 'backup_files'
  }
}

stage('Mandel Deploy Stage 2') {
  node('AWS') {
    if(rollbackNum >= 7) {
      sh "mkdir -p '${WORKSPACE}/../Mandel_Rollback_Staged/currentBackup'"
      sh "cp -r ${WORKSPACE}/currentBackup ${WORKSPACE}/../Mandel_Rollback_Staged/currentBackup"
      build job: 'Mandel_Rollback_Staged', parameters: [string(name: 'City', value: "${City}"), string(name: 'Deploy_Env', value: "${Deploy_Env}"), string(name: 'Stage', value: "2")]
    } else {
      echo 'Skipping this rollback because of given RollbackFrom value'
    }
  }
}

stage('Trace Deploy Stage 2') {
  node('AWS') {
    if(rollbackNum >= 6) {
      build job: 'Trace_Rollback_Staged', parameters: [string(name: 'City', value: "${City}"), string(name: 'Deploy_Env', value: "${Deploy_Env}"), string(name: 'Stage', value: "2")]
    } else {
      echo 'Skipping this rollback because of given RollbackFrom value'
    }
  }
}

stage('Dynamob Deployment') {
  node('master') {
    if(rollbackNum >= 5) {
      sh "mkdir -p '${WORKSPACE}/../Dynamob_Rollback/currentBackup'"
      sh "cp -r ${WORKSPACE}/currentBackup ${WORKSPACE}/../Dynamob_Rollback/currentBackup"
      build job: 'Dynamob_Rollback', parameters: [string(name: 'City', value: "${City}")]
    } else {
      echo 'Skipping this rollback because of given RollbackFrom value'
    }
  }
}

stage('Parade 1.0/1.5.1 Deployment') {
  node('AWS') {
    if(rollbackNum >= 4) {
      parallel 'Parade 1.0 Deployment':{
        if("${Parade_Version}".compareTo("1.0")==0 || "${Parade_Version}".compareTo("All")==0) {
          build job: 'Parade_1.0_Rollback', parameters: [string(name: 'City', value: "${City}"), string(name: 'Deploy_Env', value: "${Deploy_Env}")]
        }
      }, 'Parade 1.5.1 Deployment': {
        if("${Parade_Version}".compareTo("1.5.1")==0 || "${Parade_Version}".compareTo("All")==0) {
          sh "mkdir -p '${WORKSPACE}/../Parade_1.5_Rollback/currentBackup'"
          sh "cp -r ${WORKSPACE}/currentBackup ${WORKSPACE}/../Parade_1.5_Rollback/currentBackup"
          build job: 'Parade_1.5_Rollback', parameters: [string(name: 'City', value: "${City}"), string(name: 'Deploy_Env', value: "${Deploy_Env}")]
        }
      }
    } else {
      echo 'Skipping this rollback because of given RollbackFrom value'
    }
  }
}

stage('Mandel/WaitTimeModel/Map Matching Deployment') {
  node('AWS') {
    if(rollbackNum >= 3) {
      parallel 'Mandel Deployment': {
        sh "mkdir -p '${WORKSPACE}/../Mandel_Rollback_Staged/currentBackup'"
        sh "cp -r ${WORKSPACE}/currentBackup ${WORKSPACE}/../Mandel_Rollback_Staged/currentBackup"
        build job: 'Mandel_Rollback_Staged', parameters: [string(name: 'City', value: "${City}"), string(name: 'Deploy_Env', value: "${Deploy_Env}"), string(name: 'Stage', value: "1")]
      }, 'WaitTimeModel Deployment': {
        if("${City}".compareTo("elpaso_juarez")==0) {
          // TODO: Need to create the job on Jenkins
          sh "mkdir -p '${WORKSPACE}/../WaitTimeModel_Rollback/currentBackup'"
          sh "cp -r ${WORKSPACE}/currentBackup ${WORKSPACE}/../WaitTimeModel_Rollback/currentBackup"
          build job: 'WaitTimeModel_Rollback', parameters: [string(name: 'City', value: "${City}"), string(name: 'Deploy_Env', value: "${Deploy_Env}")]
        }
      }, 'Map Matching Deployment': {
        // TODO: Need to create the job on Jenkins
        sh "mkdir '${WORKSPACE}/../Map_Matching_Rollback/currentBackup'"
        sh "cp -r ${WORKSPACE}/currentBackup ${WORKSPACE}/../Map_Matching_Rollback/currentBackup"
        build job: 'Map_Matching_Rollback', parameters: [string(name: 'City', value: "${City}"), string(name: 'Deploy_Env', value: "${Deploy_Env}")]
      }
    } else {
      echo 'Skipping this rollback because of the given RollbackFrom value'
    }
  }
}

stage('Trace/Crystal/Navigator Deployment') {
  node('AWS') {
    if(rollbackNum >= 2) {
      parallel 'Trace Deployment':{
        build job: 'Trace_Rollback_Staged', parameters: [string(name: 'City', value: "${City}"), string(name: 'Deploy_Env', value: "${Deploy_Env}"), string(name: 'Stage', value: "1")]
      }, 'Crystal Deployment':{
        build job: 'Crystal_Rollback', parameters: [string(name: 'City', value: "${City}"), string(name: 'Deploy_Env', value: "${Deploy_Env}")]
      }, 'Navigator Deployment':{
        build job: 'Navigator_Rollback', parameters: [string(name: 'City', value: "${City}"), string(name: 'Deploy_Env', value: "${Deploy_Env}")]
      }
    } else {
      echo 'Skipping this rollback because of the given RollbackFrom value'
    }
  }
}

stage('FFS Deployment') {
  node('AWS') {
    if(rollbackNum >= 1) {
      build job: 'FFS_Rollback', parameters: [string(name: 'City', value: "${City}"), string(name: 'Deploy_Env', value: "${Deploy_Env}")]
    } else {
      echo 'Skipping this rollback because of the given RollbackFrom value'
    }
  }
}
