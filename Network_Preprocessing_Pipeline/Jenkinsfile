#!groovy
stage('Setup') {
  echo ("City is: ${City}")
  node {
    sh """#!/bin/bash -l
      export PYTHONPATH=${WORKSPACE}:${PYTHONPATH}
      echo ${PYTHONPATH}
      rm -r ${WORKSPACE}/output
      mkdir -p ${WORKSPACE}/output
    """
  }
}

stage('Script Checkout') {
  node {
    git credentialsId: '102eded7-0eea-44de-b457-efb71884c99a', url: 'git@bitbucket.org:calmagchiu/network-conversion-programs.git'
  }
}

// Start the script sequence
stage('pull_network.py') {
  node {
    dir('pull_new_network_version') {
      sh "python pull_network.py ${WORKSPACE}/output/ ${City}"
    }
  }
}

stage('nn_angle.py') {
  node {
    dir('pull_new_network_version') {
      sh "python nn_angle.py ${WORKSPACE}/output/"
    }
  }
}

stage('readnetwork.java') {
  node {
    dir('java_programs/readnetwork/readnetwork') {
      sh """#!/bin/bash -l
        javac *.java
        java -cp .. readnetwork/Main ${WORKSPACE}/output/
      """
    }
  }
}

stage('wkt.java') {
  node {
    dir('java_programs/wkt/wkt') {
      sh """#!/bin/bash -l
        javac *.java
        java -cp .. wkt/ObjectMain ${WORKSPACE}/output/ ${City}
      """
    }
  }
}

stage('build_zone_table.py') {
  node {
    dir('pull_new_network_version') {
      sh "python build_zone_table.py ${WORKSPACE}/output/ ${City}"
    }
  }
}

stage('create_tdtr.py') {
  node {
    dir('pull_new_network_version') {
      sh "python create_tdtr.py ${WORKSPACE}/output/ ${City}"
    }
  }
}

stage('new_turn_restrictions.py') {
  node {
    dir('pull_new_network_version') {
      sh "python new_turn_restrictions.py ${WORKSPACE}/output/ ${City}"
    }
  }
}

stage('topology.py') {
  node{
    stash includes: '**/topology/*', name: 'topology_script'
    stash includes: '**/output/**', name: 'topology_files'
  }
  node('windows') {
    unstash 'topology_script'
    unstash 'topology_files'
    dir('topology') {
      bat "C:\\Python27\\python.exe topology.py ..\\output\\ ${City}"
    }
    stash includes: '**/output/**', name: 'topology_slave'
  }
  node {
    dir("${WORKSPACE}") {
      unstash 'topology_slave'
    }
  }
}

stage('mandel_preprocessing.py') {
  node {
    dir('mandel_preprocessing') {
      sh "python preprocessing.py ${WORKSPACE}/output/ ${City}"
    }
  }
}

// Archive into Jenkins' storage, and into file structure
stage('Archive results') {
  node {
    sh """#!/bin/bash -l
    zip -r output.zip output
    mkdir ${WORKSPACE}/${City}/${BUILD_NUMBER}
    cp output.zip ${WORKSPACE}/${City}/${BUILD_NUMBER}
    """
    archiveArtifacts 'output.zip, output/*'
  }
}
/*
stage('FFS Deployment') {
  // Check with Jeff, should be an API call to move files and restart
  build job: 'Trace Server', parameters: [string(name: 'City', value: "${City}")]
}

stage('Trace/Crystal/Navigator Deployment') {
  node {
    sleep time: 5, unit: 'MINUTES'

    parallel 'Trace Deployment':{
      build job: 'Trace Server', parameters: [string(name: 'City', value: "${City}")]
    }, 'Crystal Deployment':{
      build job: 'Crystal Server', parameters: [string(name: 'City', value: "${City}")]
    }, 'Navigator Deployment':{
      build job: 'Navigator Server', parameters: [string(name: 'City', value: "${City}")]
    }

    sleep time: 5, unit: 'MINUTES'
  }
}
stage('Parade Deployment') {
  node {
    build job: 'Parade Server', parameters: [string(name: 'City', value: "${City}")]
  }
}
*/
