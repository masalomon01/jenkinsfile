#!groovy
import java.text.SimpleDateFormat


stage('Script Checkout') {
  node('AWS') {
    git credentialsId: '102eded7-0eea-44de-b457-efb71884c99a', url: 'git@bitbucket.org:calmagchiu/network-conversion-programs.git'
  }
}

stage('Setup') {
  echo ("City is: ${City}")
  node('AWS') {
    sh """#!/bin/bash -l
      export PYTHONPATH=${WORKSPACE}:${PYTHONPATH}
      echo "Removing: ${WORKSPACE}/output"
      rm -rfv ${WORKSPACE}/output/
      echo "Making directory: ${WORKSPACE}/output"
      mkdir -pv ${WORKSPACE}/output/
    """
  }
}

// Start the script sequence
stage('pull_network.py') {
  node('AWS') {
    dir('pull_new_network_version') {
      sh "python pull_network.py ${WORKSPACE}/output/ ${City}"
    }
  }
}

stage('nn_angle.py') {
  node('AWS') {
    dir('pull_new_network_version') {
      sh "python nn_angle.py ${WORKSPACE}/output/"
    }
  }
}

stage('readnetwork.java') {
  node('AWS') {
    dir('java_programs/readnetwork/readnetwork') {
      sh """#!/bin/bash -l
        javac *.java
        java -cp .. readnetwork/Main ${WORKSPACE}/output/
      """
    }
  }
}

stage('wkt.java') {
  node('AWS') {
    dir('java_programs/wkt/wkt') {
      sh """#!/bin/bash -l
        javac *.java
        java -cp .. wkt/ObjectMain ${WORKSPACE}/output/ ${City}
      """
    }
  }
}

stage('build_zone_table.py') {
  node('AWS') {
    dir('pull_new_network_version') {
      sh "python build_zone_table.py ${WORKSPACE}/output/ ${City}"
    }
  }
}

stage('create_tdtr.py') {
  node('AWS') {
    dir('pull_new_network_version') {
      sh "python create_tdtr.py ${WORKSPACE}/output/ ${City}"
    }
  }
}

stage('create_access_limit.py') {
  node('AWS') {
    dir('pull_new_network_version') {
      sh "python create_access_limit.py ${WORKSPACE}/output/ ${City}"
    }
  }
}

stage('new_turn_restrictions.py') {
  node('AWS') {
    dir('pull_new_network_version') {
      sh "python new_turn_restrictions.py ${WORKSPACE}/output/ ${City}"
    }
  }
}

stage('topology.py') {
  node('AWS') {
    stash includes: '**/topology/*', name: 'topology_script'
    stash includes: '**/output/**', name: 'topology_files'
  }
  node('windows') {
    deleteDir()
    unstash 'topology_script'
    unstash 'topology_files'
    dir('topology') {
      bat "C:\\Python27\\python.exe topology.py ..\\output\\ ${City}"
    }
    stash includes: '**/output/**', name: 'topology_slave'
  }
  node('AWS') {
    dir("${WORKSPACE}") {
      unstash 'topology_slave'
    }
  }
}

stage('mandel_preprocessing.py') {
  node('AWS') {
    dir('mandel_preprocessing') {
      sh "python preprocessing.py ${WORKSPACE}/output/ ${City}"
    }
  }
}

stage('create_gid_tdtr.py') {
  node('AWS') {
    dir('pull_new_network_version') {
      sh "python create_gid_tdtr.py ${WORKSPACE}/output/ ${City}"
    }
  }
}

// Archive into Jenkins' storage, and into file structure
stage('Archive results') {
  node('AWS') {
    sh """#!/bin/bash -l
    zip -r output.zip output
    mkdir -p ${WORKSPACE}/${City}/${BUILD_NUMBER}
    cp output.zip ${WORKSPACE}/${City}/${BUILD_NUMBER}
    """
    archiveArtifacts "output.zip, output/*, output/mandel/*, output/${City}/*"
  }
}

stage('Archive to .97') {
  node('AWS') {
    stash includes: '**/output/**', name: 'entire_output'
  }
  node('97') {
    unstash 'entire_output'
    // Set date formats for file path on .97
    def dateFormatYear = new SimpleDateFormat("yyyy")
    def dateFormatComplete = new SimpleDateFormat("MM-dd-yyyy")
    def date = new Date()
    def year=dateFormatYear.format(date)
    def complete=dateFormatComplete.format(date)

    // Set the city name for file path on .97
    def cityUpper="Tucson" //Default
    if("${City}".compareTo("austin")==0) {
      cityUpper="Austin"
    } else if("${City}".compareTo("elpaso_juarez")==0) {
      cityUpper="EP_Juarez"
    } else if("${City}".compareTo("houston")==0) {
      cityUpper="Houston"
    } else if("${City}".compareTo("newyork")==0) {
      cityUpper="NYC"
    } else if("${City}".compareTo("tucson")==0) {
      cityUpper="Tucson"
    }
    bat "C:\\Users\\NLarson\\jenkins\\copyOutputAdmin.lnk ${cityUpper} ${year} ${complete}"
  }
}

if(params.Deploy_Logic) {
  stage('FFS Deployment') {
    if("${City}".compareTo("elpaso_juarez")==0) {
      build job: 'FFS Server', parameters: [string(name: 'City', value: "elpaso"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}")]
    } else {
      build job: 'FFS Server', parameters: [string(name: 'City', value: "${CITY}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}")]
    }
  }

  stage('Trace/Crystal/Navigator Deployment') {
    node('AWS') {
      sleep time: 2, unit: 'MINUTES'

      parallel 'Trace Deployment':{
        if("${City}".compareTo("elpaso_juarez")==0) {
          build job: 'Trace Server', parameters: [string(name: 'City', value: "elpaso"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}")]
        } else {
          build job: 'Trace Server', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}")]
        }
      }, 'Crystal Deployment':{
        if("${City}".compareTo("elpaso_juarez")==0) {
          build job: 'Crystal Server', parameters: [string(name: 'City', value: "elpaso"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}")]
        } else {
          build job: 'Crystal Server', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}")]
        }
      }, 'Navigator Deployment':{
        if("${City}".compareTo("elpaso_juarez")==0) {
          build job: 'Navigator Server', parameters: [string(name: 'City', value: "elpaso"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}")]
        } else {
          build job: 'Navigator Server', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}")]
        }
      }

      sleep time: 2, unit: 'MINUTES'
    }
  }

  stage('Mandel Deployment') {
    node('AWS') {
      build job: 'Mandel Server', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}")]
    }
  }

  stage('Parade Deployment') {
    node('AWS') {
      if("${Parade_Version}".compareTo("1.0")==0 || "${Parade_Version}".compareTo("Both")==0) {
        if("${City}".compareTo("elpaso_juarez")==0) {
          build job: 'Parade Server', parameters: [string(name: 'City', value: "elpaso"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}")]
        } else {
          build job: 'Parade Server', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}")]
        }
      }

      if("${Parade_Version}".compareTo("1.5")==0 || "${Parade_Version}".compareTo("Both")==0) {
        if("${City}".compareTo("elpaso_juarez")==0) {
          build job: 'Parade 1.5 Server', parameters: [string(name: 'City', value: "elpaso"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}")]
        } else {
          build job: 'Parade 1.5 Server', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}")]
        }
      }
    }
  }
}
