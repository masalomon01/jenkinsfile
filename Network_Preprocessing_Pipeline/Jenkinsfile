#!groovy
import java.text.SimpleDateFormat


stage('Script Checkout') {
  node('AWS') {
    git credentialsId: '102eded7-0eea-44de-b457-efb71884c99a', url: 'git@bitbucket.org:calmagchiu/network-conversion-programs.git'

    echo "Check that all scripts have been pulled from bitbucket"
    if(!fileExists('pull_new_network_version/pull_network.py')) {
      error('Git failure: partial pull')
    } else if(!fileExists('pull_new_network_version/nn_angle.py')) {
      error('Git failure: partial pull')
    } else if(!fileExists('java_programs/readnetwork/readnetwork/Main.java')) {
      error('Git failure: partial pull')
    } else if(!fileExists('java_programs/wkt/wkt/ObjectMain.java')) {
      error('Git failure: partial pull')
    } else if(!fileExists('pull_new_network_version/build_zone_table.py')) {
      error('Git failure: partial pull')
    } else if(!fileExists('pull_new_network_version/create_tdtr.py')) {
      error('Git failure: partial pull')
    } else if(!fileExists('pull_new_network_version/create_access_limit.py')) {
      error('Git failure: partial pull')
    } else if(!fileExists('pull_new_network_version/new_turn_restrictions.py')) {
      error('Git failure: partial pull')
    } else if(!fileExists('topology/topology.py')) {
      error('Git failure: partial pull')
    } else if(!fileExists('mandel_preprocessing/preprocessing.py')) {
      error('Git failure: partial pull')
    } else if(!fileExists('pull_new_network_version/create_gid_tdtr.py')) {
      error('Git failure: partial pull')
    } else {
      echo "All files were pulled successfully"
    }
  }
}

stage('Setup') {
  echo ("City is: ${City}")
  echo ("Deployment environment is: ${Deploy_Env}")
  node('AWS') {
    sh """#!/bin/bash -l
      export PYTHONPATH=${WORKSPACE}:${PYTHONPATH}
      echo "Removing: ${WORKSPACE}/output"
      rm -rfv ${WORKSPACE}/output/
      echo "Making directory: ${WORKSPACE}/output"
      mkdir -pv ${WORKSPACE}/output/
    """
  }
}

stage('Network Processing Scripts') {
  node('AWS') {
    dir('pull_new_network_version') {
      sh "python pull_network.py ${WORKSPACE}/output/ ${City}"
      echo 'Finished pull_network.py'
      sh "python nn_angle.py ${WORKSPACE}/output/"
      echo 'Finished nn_angle.py'
    }
    dir('java_programs/readnetwork/readnetwork') {
      sh """#!/bin/bash -l
        javac *.java
        java -cp .. readnetwork/Main ${WORKSPACE}/output/
      """
      echo 'Finished readnetwork.java'
    }
    dir('java_programs/wkt/wkt') {
      sh """#!/bin/bash -l
        javac *.java
        java -cp .. wkt/ObjectMain ${WORKSPACE}/output/ ${City}
      """
      echo 'Finished wkt.java'
    }
    dir('pull_new_network_version') {
      sh "python build_zone_table.py ${WORKSPACE}/output/ ${City}"
      echo 'Finished build_zone_table.py'
      sh "python create_tdtr.py ${WORKSPACE}/output/ ${City}"
      echo 'Finished create_tdtr.py'
      sh "python create_access_limit.py ${WORKSPACE}/output/ ${City}"
      echo 'Finished create_access_limit.py'
      sh "python new_turn_restrictions.py ${WORKSPACE}/output/ ${City}"
      echo 'Finished new_turn_restrictions.py'
    }
    stash includes: '**/topology/*', name: 'topology_script'
    stash includes: '**/output/**', name: 'topology_files'
  }
  node('windows') {
    deleteDir()
    unstash 'topology_script'
    unstash 'topology_files'
    dir('topology') {
      bat "C:\\Python27\\python.exe topology.py ..\\output\\ ${City}"
    }
    stash includes: '**/output/**', name: 'topology_slave'
  }
  node('AWS') {
    dir("${WORKSPACE}") {
      unstash 'topology_slave'
      echo 'Finished topology.py'
    }
    dir('mandel_preprocessing') {
      sh "python preprocessing.py ${WORKSPACE}/output/ ${City}"
      echo 'Finished preprocessing.py'
    }
    dir('pull_new_network_version') {
      sh "python create_gid_tdtr.py ${WORKSPACE}/output/ ${City}"
      echo 'Finished create_gid_tdtr.py'
    }
    echo '~~~'
    echo 'Initial script sequence is complete'
    echo '~~~'
  }
}

// Archive into Jenkins' storage, and into file structure
stage('Archive results') {
  node('AWS') {
    sh """#!/bin/bash -l
    zip -r output.zip output
    mkdir -p ${WORKSPACE}/${City}/${BUILD_NUMBER}
    cp output.zip ${WORKSPACE}/${City}/${BUILD_NUMBER}
    """
    archiveArtifacts "output.zip, output/*, output/mandel/*, output/${City}/*"
  }
}

stage('Archive to .97') {
  node('AWS') {
    stash includes: '**/output/**', name: 'entire_output'
  }
  node('97') {
    unstash 'entire_output'
    // Set date formats for file path on .97
    def dateFormatYear = new SimpleDateFormat("yyyy")
    def dateFormatComplete = new SimpleDateFormat("MM-dd-yyyy")
    def date = new Date()
    def year=dateFormatYear.format(date)
    def complete=dateFormatComplete.format(date)

    // Set the city name for file path on .97
    def cityUpper="Tucson" //Default
    if("${City}".compareTo("austin")==0) {
      cityUpper="Austin"
    } else if("${City}".compareTo("elpaso_juarez")==0) {
      cityUpper="EP_Juarez"
    } else if("${City}".compareTo("houston")==0) {
      cityUpper="Houston"
    } else if("${City}".compareTo("newyork")==0) {
      cityUpper="NYC"
    } else if("${City}".compareTo("tucson")==0) {
      cityUpper="Tucson"
    }
    bat "C:\\Users\\NLarson\\jenkins\\copyOutput.bat ${cityUpper} ${year} ${complete}"
  }
}

if(params.Deploy_Logic) {
  stage('FFS Deployment') {
    build job: 'FFS_Server', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}"), string(name: 'Deploy_Env', value: "${Deploy_Env}")]
  }

  stage('Trace/Crystal/Navigator Deployment') {
    node('AWS') {
      sleep 30

      parallel 'Trace Deployment 1':{
        build job: 'Trace_Server_Staged', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}"), string(name: 'Deploy_Env', value: "${Deploy_Env}"), string(name: 'Stage', value: "1")]
      }, 'Crystal Deployment':{
        build job: 'Crystal_Server', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}"), string(name: 'Deploy_Env', value: "${Deploy_Env}")]
      }, 'Navigator Deployment':{
        build job: 'Navigator_Server', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}"), string(name: 'Deploy_Env', value: "${Deploy_Env}")]
      }

      sleep 30
    }
  }

  stage('Mandel/WaitTimeModel/Map Matching Deployment') {
    node('AWS') {
      parallel 'Mandel Deployment 1': {
        build job: 'Mandel_Server_Staged', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}"), string(name: 'Deploy_Env', value: "${Deploy_Env}"), string(name: 'Stage', value: "1")]
      }, 'WaitTimeModel Deployment': {
        if("${City}".compareTo("elpaso_juarez")==0) {
          build job: 'WaitTimeModel_Server', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}"), string(name: 'Deploy_Env', value: "${Deploy_Env}")]
        }
      }, 'Map Matching Deployment': {
        build job: 'Map_Matching_Server', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}"), string(name: 'Deploy_Env', value: "${Deploy_Env}")]
      }
    }
  }

  stage('Parade 1.0/1.5.1 Deployment') {
    node('AWS') {
      parallel 'Parade 1.0 Deployment':{
        if("${Parade_Version}".compareTo("1.0")==0 || "${Parade_Version}".compareTo("All")==0) {
          build job: 'Parade_Server', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}"), string(name: 'Deploy_Env', value: "${Deploy_Env}")]
        }
      }, 'Parade 1.5.1 Deployment': {
        if("${Parade_Version}".compareTo("1.5.1")==0 || "${Parade_Version}".compareTo("All")==0) {
          build job: 'Parade_1.5_Server', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}"), string(name: 'Deploy_Env', value: "${Deploy_Env}")]
        }
      }
    }
  }

  stage('Dynamob Deployment') {
    node('master') {
      build job: 'Dynamob_Server', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}")]
    }
  }

  stage('Trace Deployment Stage 2') {
    node('AWS') {
      build job: 'Trace_Server_Staged', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}"), string(name: 'Deploy_Env', value: "${Deploy_Env}"), string(name: 'Stage', value: "2")]
    }
  }

  stage('Mandel Deployment Stage 2') {
    node('AWS') {
      build job: 'Mandel_Server_Staged', parameters: [string(name: 'City', value: "${City}"), string(name: 'ARTIFACT_BUILD', value: "${BUILD_NUMBER}"), string(name: 'Deploy_Env', value: "${Deploy_Env}"), string(name: 'Stage', value: "2")]
    }
  }
}
